{
  "apiSpecification": {
    "version": "2.0",
    "lastUpdated": "2025-08-05",
    "baseUrl": "http://localhost:3001",
    "productionUrl": "https://yap-nest-ln0v4e3dr-berkans-projects-d2fa45cc.vercel.app",
    "description": "Complete YAP Nest Backend API with all missing components implemented",
    
    "authentication": {
      "type": "JWT Bearer Token",
      "testUser": {
        "email": "test@example.com",
        "password": "password123"
      }
    },

    "endpoints": {
      "health": {
        "GET /health": {
          "description": "Health check endpoint",
          "response": {
            "status": "ok",
            "timestamp": "2025-08-05T16:43:53.294Z"
          }
        }
      },

      "authentication": {
        "POST /auth/register": {
          "description": "Register new user",
          "body": {
            "name": "string (required)",
            "email": "string (required, unique)",
            "password": "string (required, min: 6)",
            "role": "enum (admin, manager, member)",
            "avatar": "string (optional)"
          },
          "response": {
            "user": "User object",
            "token": "JWT token",
            "tokenType": "Bearer",
            "expiresIn": 3600
          }
        },

        "POST /auth/login": {
          "description": "User login",
          "body": {
            "email": "string (required)",
            "password": "string (required)",
            "rememberMe": "boolean (optional)"
          },
          "response": {
            "user": "User object",
            "token": "JWT token",
            "tokenType": "Bearer",
            "expiresIn": 3600
          }
        },

        "POST /auth/refresh": {
          "description": "Refresh JWT token",
          "headers": {
            "Authorization": "Bearer <token>"
          },
          "response": {
            "user": "User object",
            "token": "JWT token",
            "tokenType": "Bearer",
            "expiresIn": 3600
          }
        },

        "GET /auth/profile": {
          "description": "Get user profile",
          "headers": {
            "Authorization": "Bearer <token>"
          },
          "response": "User object"
        },

        "POST /auth/logout": {
          "description": "User logout",
          "headers": {
            "Authorization": "Bearer <token>"
          },
          "response": {
            "message": "Logged out successfully"
          }
        },

        "POST /auth/forgot-password": {
          "description": "Request password reset",
          "body": {
            "email": "string (required)"
          },
          "response": {
            "message": "Password reset email sent successfully"
          }
        },

        "POST /auth/reset-password": {
          "description": "Reset password with token",
          "body": {
            "token": "string (required)",
            "newPassword": "string (required, min: 6)"
          },
          "response": {
            "message": "Password reset successfully"
          }
        },

        "PUT /auth/change-password": {
          "description": "Change password",
          "headers": {
            "Authorization": "Bearer <token>"
          },
          "body": {
            "currentPassword": "string (required)",
            "newPassword": "string (required, min: 6)"
          },
          "response": {
            "message": "Password changed successfully"
          }
        }
      },

      "projects": {
        "GET /projects": {
          "description": "Get all projects (filtered by user access)",
          "headers": {
            "Authorization": "Bearer <token>"
          },
          "response": "Array of Project objects"
        },

        "POST /projects": {
          "description": "Create new project",
          "headers": {
            "Authorization": "Bearer <token>"
          },
          "body": {
            "title": "string (required)",
            "description": "string (required)",
            "startDate": "date (required)",
            "endDate": "date (optional)",
            "budget": "number (optional)",
            "progress": "number (optional, 0-100)"
          },
          "response": "Project object"
        },

        "GET /projects/:id": {
          "description": "Get project by ID",
          "headers": {
            "Authorization": "Bearer <token>"
          },
          "response": "Project object"
        },

        "PATCH /projects/:id": {
          "description": "Update project",
          "headers": {
            "Authorization": "Bearer <token>"
          },
          "body": {
            "title": "string (optional)",
            "description": "string (optional)",
            "status": "enum (draft, active, on_hold, completed, cancelled)",
            "startDate": "date (optional)",
            "endDate": "date (optional)",
            "budget": "number (optional)",
            "progress": "number (optional)"
          },
          "response": "Project object"
        },

        "DELETE /projects/:id": {
          "description": "Delete project",
          "headers": {
            "Authorization": "Bearer <token>"
          },
          "response": {
            "message": "Project deleted successfully"
          }
        },

        "GET /projects/stats": {
          "description": "Get project statistics",
          "headers": {
            "Authorization": "Bearer <token>"
          },
          "response": {
            "total": "number",
            "active": "number",
            "completed": "number",
            "cancelled": "number",
            "completionRate": "number"
          }
        }
      },

      "tasks": {
        "GET /tasks": {
          "description": "Get all tasks (with optional projectId filter)",
          "headers": {
            "Authorization": "Bearer <token>"
          },
          "query": {
            "projectId": "string (optional)"
          },
          "response": "Array of Task objects"
        },

        "POST /tasks": {
          "description": "Create new task",
          "headers": {
            "Authorization": "Bearer <token>"
          },
          "body": {
            "title": "string (required)",
            "description": "string (required)",
            "projectId": "string (required)",
            "assigneeId": "string (required)",
            "priority": "enum (low, medium, high, urgent)",
            "dueDate": "date (optional)",
            "estimatedHours": "number (optional)",
            "parentTaskId": "string (optional)",
            "tags": "array of strings (optional)"
          },
          "response": "Task object"
        },

        "GET /tasks/:id": {
          "description": "Get task by ID",
          "headers": {
            "Authorization": "Bearer <token>"
          },
          "response": "Task object"
        },

        "PATCH /tasks/:id": {
          "description": "Update task",
          "headers": {
            "Authorization": "Bearer <token>"
          },
          "body": {
            "title": "string (optional)",
            "description": "string (optional)",
            "status": "enum (todo, in_progress, review, completed, cancelled)",
            "priority": "enum (low, medium, high, urgent)",
            "assigneeId": "string (optional)",
            "dueDate": "date (optional)",
            "estimatedHours": "number (optional)",
            "actualHours": "number (optional)",
            "tags": "array of strings (optional)"
          },
          "response": "Task object"
        },

        "DELETE /tasks/:id": {
          "description": "Delete task",
          "headers": {
            "Authorization": "Bearer <token>"
          },
          "response": {
            "message": "Task deleted successfully"
          }
        },

        "GET /tasks/stats": {
          "description": "Get task statistics",
          "headers": {
            "Authorization": "Bearer <token>"
          },
          "response": {
            "total": "number",
            "todo": "number",
            "inProgress": "number",
            "review": "number",
            "completed": "number",
            "cancelled": "number"
          }
        }
      },

      "comments": {
        "GET /comments": {
          "description": "Get all comments (with optional filters)",
          "headers": {
            "Authorization": "Bearer <token>"
          },
          "query": {
            "projectId": "string (optional)",
            "taskId": "string (optional)",
            "authorId": "string (optional)"
          },
          "response": "Array of Comment objects"
        },

        "POST /comments": {
          "description": "Create new comment",
          "headers": {
            "Authorization": "Bearer <token>"
          },
          "body": {
            "content": "string (required)",
            "type": "enum (task, project, general)",
            "projectId": "string (optional)",
            "taskId": "string (optional)",
            "parentCommentId": "string (optional)"
          },
          "response": "Comment object"
        },

        "GET /comments/:id": {
          "description": "Get comment by ID",
          "headers": {
            "Authorization": "Bearer <token>"
          },
          "response": "Comment object"
        },

        "PATCH /comments/:id": {
          "description": "Update comment",
          "headers": {
            "Authorization": "Bearer <token>"
          },
          "body": {
            "content": "string (optional)",
            "type": "enum (task, project, general)"
          },
          "response": "Comment object"
        },

        "DELETE /comments/:id": {
          "description": "Delete comment",
          "headers": {
            "Authorization": "Bearer <token>"
          },
          "response": {
            "message": "Comment deleted successfully"
          }
        },

        "GET /comments/stats": {
          "description": "Get comment statistics",
          "headers": {
            "Authorization": "Bearer <token>"
          },
          "response": {
            "total": "number",
            "byType": {
              "task": "number",
              "project": "number",
              "general": "number"
            }
          }
        }
      }
    },

    "dataModels": {
      "User": {
        "id": "uuid",
        "name": "string",
        "email": "string (unique)",
        "avatar": "string (optional)",
        "role": "enum (admin, manager, member)",
        "isActive": "boolean",
        "createdAt": "timestamp",
        "updatedAt": "timestamp"
      },

      "Project": {
        "id": "uuid",
        "title": "string",
        "description": "string",
        "status": "enum (draft, active, on_hold, completed, cancelled)",
        "startDate": "timestamp",
        "endDate": "timestamp (optional)",
        "budget": "decimal",
        "progress": "decimal (0-100)",
        "ownerId": "uuid",
        "owner": "User object",
        "createdAt": "timestamp",
        "updatedAt": "timestamp"
      },

      "Task": {
        "id": "uuid",
        "title": "string",
        "description": "string",
        "status": "enum (todo, in_progress, review, completed, cancelled)",
        "priority": "enum (low, medium, high, urgent)",
        "assigneeId": "uuid",
        "assignee": "User object",
        "projectId": "uuid",
        "project": "Project object",
        "dueDate": "timestamp (optional)",
        "estimatedHours": "decimal",
        "actualHours": "decimal",
        "parentTaskId": "uuid (optional)",
        "parentTask": "Task object (optional)",
        "tags": "array of strings",
        "createdAt": "timestamp",
        "updatedAt": "timestamp"
      },

      "Comment": {
        "id": "uuid",
        "content": "string",
        "type": "enum (task, project, general)",
        "authorId": "uuid",
        "author": "User object",
        "taskId": "uuid (optional)",
        "task": "Task object (optional)",
        "projectId": "uuid (optional)",
        "project": "Project object (optional)",
        "parentCommentId": "uuid (optional)",
        "parentComment": "Comment object (optional)",
        "createdAt": "timestamp",
        "updatedAt": "timestamp"
      }
    },

    "features": {
      "authentication": {
        "JWT": "✅ Implemented",
        "Password Reset": "✅ Implemented with Email Service",
        "Role-based Access": "✅ Implemented",
        "Token Refresh": "✅ Implemented"
      },

      "security": {
        "Rate Limiting": "✅ Implemented (100 req/min, 1000 req/hour)",
        "Global Error Handler": "✅ Implemented",
        "CORS": "✅ Configured",
        "Input Validation": "✅ Implemented with class-validator"
      },

      "database": {
        "PostgreSQL": "✅ Connected",
        "TypeORM": "✅ Configured",
        "Relations": "✅ All entities properly related",
        "Migrations": "✅ Synchronize enabled"
      },

      "documentation": {
        "Swagger UI": "✅ Available at /api",
        "API Documentation": "✅ Complete",
        "Response Examples": "✅ Included"
      },

      "email": {
        "Password Reset": "✅ Service implemented",
        "Welcome Email": "✅ Service implemented",
        "Task Assignment": "✅ Service implemented",
        "Project Invitation": "✅ Service implemented"
      }
    },

    "deployment": {
      "local": {
        "url": "http://localhost:3001",
        "status": "✅ Running",
        "database": "PostgreSQL (yap_nest)"
      },
      "production": {
        "url": "https://yap-nest-ln0v4e3dr-berkans-projects-d2fa45cc.vercel.app",
        "status": "✅ Deployed",
        "database": "In-memory (Vercel serverless)"
      }
    },

    "testing": {
      "health": "✅ Working",
      "authentication": "✅ Working",
      "projects": "✅ Working",
      "tasks": "✅ Working",
      "comments": "✅ Working",
      "swagger": "✅ Working"
    }
  }
} 